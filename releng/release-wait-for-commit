#!/usr/bin/env python3
"""Waits for commit to show up in s3
"""

import argparse
import http.client
import os
import sys
import time
from lib import ansiterm
from datetime import datetime, timedelta


def main(commit: str, s3_key: str, timeout: int) -> int:
    print(f"{ansiterm.sgr.bold.fg_cyn}==> Waiting for commit {commit} to show up in s3://datawire-static-files/{s3_key}/")
    print(f"    Check Circle CI if you would like to check progress:")
    print(f"        https://app.circleci.com/pipelines/github/emissary-ingress/emissary{ansiterm.sgr.reset}")
    s3_bucket = os.getenv("AWS_S3_BUCKET")

    if s3_bucket == '':
        s3_bucket = 'datawire-static-files'
    s3_url = f"{s3_bucket}.s3.amazonaws.com"
    started = datetime.now()
    stop_time = started + timedelta(minutes=timeout)
    while datetime.now() < stop_time:
        conn = http.client.HTTPSConnection(s3_url)
        conn.request("GET", f"/{s3_key}/{commit}")
        r1 = conn.getresponse()
        if r1.status == 200:
            print(f"{ansiterm.sgr.bold.fg_grn}==> Commit {commit} found in S3!{ansiterm.sgr}")
            return 0
        print(f"    {ansiterm.sgr.fg_red}Commit {commit} still not in S3, sleeping before trying again.{ansiterm.sgr}")
        time.sleep(30)
    print('Timed out waiting for commit')
    return 1


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Wait for commit to show up in s3')
    parser.add_argument('--commit', required=True)
    parser.add_argument('--s3-key', default="dev-builds")
    parser.add_argument('--timeout-minutes', type=int, default=10)
    args = parser.parse_args()

    sys.exit(main(
        commit=args.commit,
        s3_key=args.s3_key,
        timeout=args.timeout_minutes,
    ))
